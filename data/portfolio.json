{
    "sortingAnimations":{
        "title":"Sorting Animations",
        "content":[
            {
                "type":"slideshow",
                "data":[
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/sortingAnim/heaprand.webp",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/sortingAnim/quick3dec.webp",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/sortingAnim/quickrand.webp",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/sortingAnim/selectrand.webp",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/sortingAnim/shelldec.webp",
                        "caption":""
                    }
                ]
            },
            {
                "type":"languages",
                "data":[
                    "Java"
                ]
            },
            {
                "type":"buttons",
                "data":[
                    {
                        "text":"Open GitHub",
                        "url":"https://github.com/danielzelfo/SortingAnimations"
                    }
                ]
            },
            {
                "type":"description",
                "data":"This is a JavaFX program that can be used to visualize sorting animations. It allows the user to generate data that is random, ascending, or descending with their choice of the size. The user can then choose which algorithm to use to sort the data The algorithms include: Insertion Sort, Selection Sort, Shell Sort, Heap Sort, and three variations of QuickSort."
            }
        ]
    },
    "astra":{
        "title":"AstraMonitor / AstraBot",
        "content":[
            {
                "type":"slideshow",
                "data":[
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/astra/bb1650.jpg",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/astra/amazon3080.jpg",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/astra/amazonps5.jpg",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/astra/amazonuk3060ti.jpg",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/astra/astracommands1.jpg",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/astra/astracommands2.jpg",
                        "caption":""
                    }
                ]
            },
            {
                "type":"languages",
                "data":[
                    "Python"
                ]
            },
            {
                "type":"buttons",
                "data":[
                    {
                        "text":"Go to Website",
                        "url":"https://astraworld.netlify.app"
                    }
                ]
            },
            {
                "type":"description",
                "data":"AstraMonitor is a specialized Discord bot designed to notify users when a product restocks on various e-commerce platforms such as Amazon, Bestbuy, Newegg, and Walmart. To ensure optimal performance, AstraMonitor implements a concurrent thread pool management system that allows for parallel execution of tasks and efficient monitoring of a large number of products."
            }
        ]
    },
    "wearableWeather":{
        "title":"Wearable Weather",
        "content":[
            {
                "type":"slideshow",
                "data":[
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/wearableWeather.jpg",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/wearableWeatherLive.png",
                        "caption":""
                    }
                ]
            },
            {
                "type":"languages",
                "data":[
                    "C++",
                    "Python",
                    "HTML",
                    "CSS"
                ]
            },
            {
                "type":"buttons",
                "data":[
                    {
                        "text":"Open GitHub",
                        "url":"https://github.com/danielzelfo/WearableWeather"
                    }
                ]
            },
            {
                "type":"description",
                "data":"Wearable Weather is an IoT project that enables real-time data transmission from a connected device to a web-based frontend via a Flask REST API. The project's design is based on an Arduino microcontroller, equipped with an ESP chip and a light sensor, that sends light-related data to a web server. The server, built using Python and the Flask web framework, processes the received data and updates the frontend accordingly. The web-based frontend, built using HTML and CSS, displays a live animation of the sensor data, providing real-time information on the surrounding light conditions. Despite the project's complexity, it was developed within a 36-hour time frame."
            }
        ]
    },
    "mipsSudoku":{
        "title":"MIPS Assembly Sudoku",
        "content":[
            {
                "type":"slideshow",
                "data":[
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/mipsSudoku/mipsSudoku1.png",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/mipsSudoku/mipsSudoku2.png",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/mipsSudoku/mipsSudoku3.png",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/mipsSudoku/mipsSudoku4.png",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/mipsSudoku/mipsSudoku5.png",
                        "caption":""
                    }
                ]
            },
            {
                "type":"languages",
                "data":[
                    "Assembly"
                ]
            },
            {
                "type":"description",
                "data":"This is a Sudoku game implemented in MIPS assembly language. It utilizes the MIPS Assembler and Runtime Simulator (MARS) as well as a custom tool that displays the game grid. This tool facilitates communication between the MIPS assembly program and the user interface, allowing for the input and display of digits and colors for each cell. The program implements functionality to validate user-inputted moves by checking for duplicate values in the corresponding row, column, and box. If a move is not valid, the conflicting cells are indicated with an error color. Additionally, the program offers a hint feature, providing possible values for a given cell. The game state can be saved and loaded at any point during play."
            }
        ]
    },
    "cppPrograms":{
        "title":"C++ Programs",
        "content":[
            {
                "type":"languages",
                "data":[
                    "C++"
                ]
            },
            {
                "type":"readmes",
                "data": ["GraphAlgorithmsCpp", "AlgorithmsCpp", "DataStructuresCpp", "OOPCpp", "AirportFlights", "SimpleTextEditor", "StacksExpressions"]
            }
        ]
    },
    "dynamite":{
        "title":"Dynamite",
        "content":[
            {
                "type":"slideshow",
                "data":[
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/dynamite/dynamite-1.png",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/dynamite/dynamite-2.png",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/dynamite/dynamite-3.png",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/dynamite/dynamite-4.png",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/dynamite/dynamite-5.png",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/dynamite/dynamite-6.jpg",
                        "caption":""
                    }
                ]
            },
            {
                "type":"languages",
                "data":[
                    "Python",
                    "HTML",
                    "SCSS",
                    "JavaScript"
                ]
            },
            {
                "type":"buttons",
                "data":[
                    {
                        "text":"Open GitHub",
                        "url":"https://github.com/danielzelfo/dynamite"
                    }
                ]
            },
            {
                "type":"description",
                "data":"Dynamite is a comprehensive tool for creating interactive web-based educational materials. It allows users to create lessons by inputting content directly onto the home page, providing a live preview URL as the lesson is being constructed. The resulting lesson webpage can include a variety of multimedia elements, such as text, videos and interactive questions. The software has the potential to include additional features, such as multiple choice questions and code."
            }
        ]
    },
    "shopSupreme":{
        "title":"ShopSupreme",
        "content":[
            {
                "type":"slideshow",
                "data":[
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/ShopSupreme/items.png",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/ShopSupreme/checkout.png",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/ShopSupreme/run.png",
                        "caption":""
                    }
                ]
            },
            {
                "type":"languages",
                "data":[
                    "HTML",
                    "CSS",
                    "JavaScript"
                ]
            },
            {
                "type":"buttons",
                "data":[
                    {
                        "text":"Open GitHub",
                        "url":"https://github.com/danielzelfo/ShopSupreme"
                    },
                    {
                        "text":"Free on Chrome Webstore",
                        "url":"https://chrome.google.com/webstore/detail/supreme-bot-shopsupreme/egoidoeijbfliecicioclcnhmpkbnked"
                    }
                ]
            },
            {
                "type":"description",
                "data":"ShopSupreme is a checkout bot for supremenewyork.com. It is a chrome extension made using JavaScript."
            }
        ]
    },
    "mountieBot":{
        "title":"MountieBot",
        "content":[
            {
                "type":"slideshow",
                "data":[
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/mountieBot/cht.jpg",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/mountieBot/classes.jpg",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/mountieBot/define.jpg",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/mountieBot/link.jpg",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/mountieBot/poll.jpg",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/mountieBot/prefix.jpg",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/mountieBot/role.jpg",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/mountieBot/weather.jpg",
                        "caption":""
                    }
                ]
            },
            {
                "type":"languages",
                "data":[
                    "Python"
                ]
            },
            {
                "type":"buttons",
                "data":[
                    {
                        "text":"Open GitHub",
                        "url":"https://github.com/mtsac-cs/MountieBot"
                    }
                ]
            },
            {
                "type":"description",
                "data":"MountieBot is a discord bot made with Python and uses a MySQL server to store information about the discord server so that the information like the self assignable roles, prefixes, and links are saved and persist."
            }
        ]
    },
    "todoList":{
        "title":"To-do List",
        "content":[
            {
                "type":"component",
                "data":"ToDoList"
            },
            {
                "type":"languages",
                "data":[
                    "HTML",
                    "SCSS",
                    "JavaScript"
                ]
            },
            {
                "type":"buttons",
                "data":[
                    {
                        "text":"Open GitHub",
                        "url":"https://github.com/danielzelfo/ToDo-List"
                    }
                ]
            },
            {
                "type":"description",
                "data":"This is a todo list made using CSS and jQuery. It allows the user to enter tasks on the todo list, add more lines for tasks, cross out tasks, remove tasks, and much more."
            }
        ]
    },
    "scheduler":{
        "title":"Employee Scheduler Program",
        "content":[
            {
                "type":"slideshow",
                "data":[
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/availability.png",
                        "caption":""
                    }
                ]
            },
            {
                "type":"languages",
                "data":[
                    "Python",
                    "HTML",
                    "CSS",
                    "JavaScript"
                ]
            },
            {
                "type":"buttons",
                "data":[
                    {
                        "text":"Open GitHub",
                        "url":"https://github.com/hyc121110/CitrusHack2019"
                    }
                ]
            },
            {
                "type":"description",
                "data":"This program uses a web interface to get the availability of employees. It then allows the employer to generate a work schedule for employees using all their availabilities. It uses Python for the backend, which includes the Flask web framework. Python is also used to generate the work schedules. This was all made under 24 hours."
            }
        ]
    },
    "neighborBank":{
        "title":"Friendly Neighborhood Bank",
        "content":[
            {
                "type":"slideshow",
                "data":[
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/neighborBankCover.png",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/neighborBankCreate.png",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/neighborBankTrans.png",
                        "caption":""
                    }
                ]
            },
            {
                "type":"languages",
                "data":[
                    "Java"
                ]
            },
            {
                "type":"buttons",
                "data":[
                    {
                        "text":"Open GitHub",
                        "url":"https://github.com/danielzelfo/NeighborBank"
                    }
                ]
            },
            {
                "type":"description",
                "data":"Friendly Neighborhood Bank is a banking application made with Java. It allows users to create different types of accounts and make transactions within those accounts. It has a GUI made with JavaFX."
            }
        ]
    },
    "opbot":{
        "title":"oPBoT",
        "content":[
            {
                "type":"slideshow",
                "data":[
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/opbotDemo.png",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/oPBoT.png",
                        "caption":""
                    }
                ]
            },
            {
                "type":"languages",
                "data":[
                    "Java"
                ]
            },
            {
                "type":"buttons",
                "data":[
                    {
                        "text":"Open GitHub",
                        "url":"https://github.com/danielzelfo/OPBoT"
                    }
                ]
            },
            {
                "type":"description",
                "data":"oPBoT is a discord bot made using Java for discord servers. It includes basic moderation commands and voice channel commands."
            }
        ]
    },
    "encrytion":{
        "title":"Encryption Using Matrices",
        "content":[
            {
                "type":"component",
                "data":"EncryptionUsingMatrices"
            },
            {
                "type":"languages",
                "data":[
                    "HTML",
                    "CSS",
                    "JavaScript"
                ]
            },
            {
                "type":"description",
                "data":"This program uses JavaScript to encrypt messages than the user can input through a web interface made using HTML and CSS. The program then encryptes the messages using a random 2x2 matrix. The user is given the encrypted message and a passcode that can be used to decrypt the message."
            }
        ]
    },
    "paint":{
        "title":"Paint",
        "content":[
            {
                "type":"component",
                "data":"Paint"
            },
            {
                "type":"component",
                "data":"PixelatedPaint"
            },
            {
                "type":"languages",
                "data":[
                    "HTML",
                    "SCSS",
                    "JavaScript"
                ]
            },
            {
                "type":"buttons",
                "data":[
                    {
                        "text":"Open GitHub",
                        "url":"https://github.com/danielzelfo/PixelatedPaint"
                    }
                ]
            },
            {
                "type":"description",
                "data":"This webpage presents two distinct paint programs, both developed using JavaScript. They allow users to paint using any color, erase and adjust the size of the pen. One program uses the canvas element to create a regular paint program and the other program is a pixelated paint program that paints individual elements on the page."
            }
        ]
    },
    "spidey":{
        "title":"Spidey Search",
        "content":[
            {
                "type":"slideshow",
                "data":[
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/spidey/home.jpg",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/spidey/cisco.jpg",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/spidey/csc.jpg",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/spidey/mswe.jpg",
                        "caption":""
                    }
                ]
            },
            {
                "type":"languages",
                "data":[
                    "Python",
                    "JavaScript"
                ]
            },
            {
                "type":"buttons",
                "data":[
                    {
                        "text":"Open Website",
                        "url":"https://spideyweb.netlify.app"
                    }
                ]
            },
            {
                "type":"readmes",
                "data": ["spidey"]
            }
        ]
    },
    "FabFlix":{
        "title":"FabFlix",
        "content":[
            {
                "type":"languages",
                "data":[
                    "Java",
                    "JavaScript",
                    "SQL"
                ]
            },
            {
                "type":"readmes",
                "data": ["FabFlix"]
            }
        ]
    },
    "auctionServer":{
        "title":"Auction Server",
        "content":[
            {
                "type":"slideshow",
                "data":[
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/auctionServer/help.jpg",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/auctionServer/sell.jpg",
                        "caption":""
                    },
                    {
                        "url":"https://danielzelfo.github.io/img/min/portfolio/auctionServer/buy.jpg",
                        "caption":""
                    }
                ]
            },
            {
                "type":"languages",
                "data":[
                    "C"
                ]
            },
            {
                "type":"description",
                "data": "This is an auction server written in pure C using sockets and the POSIX thread library. It is built using the Producer–consumer pattern, scalable data structures, and synchronization primitives to allow clients to concurrently create, view, and participate in auctions while keeping track of their sales, wins, and balances."
            }
        ]
    }
}